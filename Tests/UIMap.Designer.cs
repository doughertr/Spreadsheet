// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uICellContentsTextboxEdit = this.UISpreadsheetWindow.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveaSpreadsheetWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveaSpreadsheetWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinEdit uINameEdit1 = this.UISaveaSpreadsheetWindow.UIItemWindow.UITest2sprdListItem.UINameEdit;
            WinMenuItem uILoadMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UILoadMenuItem;
            WinButton uIOpenButton = this.UISaveaSpreadsheetWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinButton uICloseButton1 = this.UISpreadsheetWindow.UITestsprdTitleBar.UICloseButton;
            WinButton uICloseButton2 = this.UISpreadsheetWindow.UITest2sprdTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UISpreadsheetWindowExePath, this.RecordedMethod1Params.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(33, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(34, 11));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(64, 40));

            // Type 'A1' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod1Params.UICellContentsTextboxEditText;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(207, 96));

            // Type 'C4' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod1Params.UICellContentsTextboxEditText1;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(125, 145));

            // Type '5' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod1Params.UICellContentsTextboxEditText2;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(229, 118));

            // Type '4' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod1Params.UICellContentsTextboxEditText3;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(234, 165));

            // Type '=B6 + C5' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod1Params.UICellContentsTextboxEditText4;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod1Params.UICellContentsTextboxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(45, 16));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(53, 11));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(27, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(50, 3));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(57, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(38, 20));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(9, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(23, 6));

            // Click 'File' -> 'Load' menu item
            Mouse.Click(uILoadMenuItem, new Point(58, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(41, 18));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(56, 23));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(38, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(36, 20));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(26, 16));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uICellContentsTextboxEdit = this.UISpreadsheetWindow.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UISpreadsheetWindowExePath, this.RecordedMethod2Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(215, 103));

            // Type 'A1' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod2Params.UICellContentsTextboxEditText;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(78, 45));

            // Type '=A2 + A3' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod2Params.UICellContentsTextboxEditText1;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(75, 70));

            // Type '7' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod2Params.UICellContentsTextboxEditText2;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(70, 60));

            // Type '7' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod2Params.UICellContentsTextboxEditText3;

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(79, 125));

            // Type 'test' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod2Params.UICellContentsTextboxEditText4;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod2Params.UICellContentsTextboxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextboxEdit = this.UISpreadsheetWindow.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsTextbox' text box equals ''
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellContentsTextboxEditText, uICellContentsTextboxEdit.Text, "Textbox has invalid text; Should not have text.");
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextboxEdit = this.UISpreadsheetWindow.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveaSpreadsheetWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveaSpreadsheetWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinEdit uICellContentsTextboxEdit1 = this.UISpreadsheetWindow1.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            WinButton uICloseButton = this.UISpreadsheetWindow1.UITestsprdTitleBar.UICloseButton;
            WinButton uIYesButton1 = this.UIUnsavedWorkWindow.UIYesWindow.UIYesButton;
            WinMenuItem uILoadMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UILoadMenuItem;
            WinButton uIOpenButton = this.UISaveaSpreadsheetWindow.UIOpenWindow.UIOpenButton;
            WinButton uICloseButton1 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinEdit uINameEdit1 = this.UISaveaSpreadsheetWindow.UIItemWindow.UITest2sprdListItem.UINameEdit;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinButton uICloseButton2 = this.UISpreadsheetWindow.UITestsprdTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIUnsavedWorkWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UIUnsavedWorkWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod3Params.UISpreadsheetWindowExePath, this.RecordedMethod3Params.UISpreadsheetWindowAlternateExePath);

            // Type 'A1 + A2' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod3Params.UICellContentsTextboxEditText;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod3Params.UICellContentsTextboxEditSendKeys, ModifierKeys.None);

            // Type '=A2 * A3' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod3Params.UICellContentsTextboxEditText1;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod3Params.UICellContentsTextboxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(42, 65));

            // Type '5' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod3Params.UICellContentsTextboxEditText2;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod3Params.UICellContentsTextboxEditSendKeys2, ModifierKeys.None);

            // Type '7' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod3Params.UICellContentsTextboxEditText3;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod3Params.UICellContentsTextboxEditSendKeys3, ModifierKeys.None);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(52, 15));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(31, 18));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(15, 12));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(23, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(34, 4));

            // Type ' ' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit1.Text = this.RecordedMethod3Params.UICellContentsTextboxEditText4;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit1, this.RecordedMethod3Params.UICellContentsTextboxEditSendKeys4, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(24, 4));

            // Click 'File' -> 'Load' menu item
            Mouse.Click(uILoadMenuItem, new Point(64, 5));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(56, 15));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(20, 5));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(43, 5));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(64, 7));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(140, 16));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(56, 11));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(37, 11));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(18, 11));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(87, 144));

            // Type '{Down}{Right}{Right}{Right}{Down}{Left}{Up}{Right}{Down}{Left}{Up}{Right}{Up}{Right}{Down}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Down}{Down}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Left}{Left}{Up}{Right}{Up}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod3Params.UICellContentsTextboxEditSendKeys5, ModifierKeys.None);

            // Click 'File' -> 'Load' menu item
            Mouse.Click(uILoadMenuItem, new Point(46, 13));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(72, 13));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(24, 3));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(20, 8));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(24, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(32, 13));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(21, 9));

            // Click 'cellContentsTextbox' text box
            Mouse.Click(uICellContentsTextboxEdit, new Point(94, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(24, 11));
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uICellContentsTextboxEdit = this.UISpreadsheetWindow.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheetWindow1.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveaSpreadsheetWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveaSpreadsheetWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinEdit uIDatemodifiedEdit = this.UISaveaSpreadsheetWindow.UIItemWindow.UITestsprdListItem.UIDatemodifiedEdit;
            WinButton uICloseButton = this.UISpreadsheetWindow1.UITestsprdTitleBar.UICloseButton;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinButton uICloseButton1 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIUnsavedWorkWindow.UICancelWindow.UICancelButton;
            WinMenuItem uILoadMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UILoadMenuItem;
            WinButton uIOpenButton = this.UISaveaSpreadsheetWindow.UIOpenWindow.UIOpenButton;
            WinButton uICloseButton2 = this.UISpreadsheetWindow.UITestsprdTitleBar.UICloseButton;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinButton uIYesButton1 = this.UIUnsavedWorkWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod4Params.UISpreadsheetWindowExePath, this.RecordedMethod4Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(65, 44));

            // Type 'A2 + A3' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod4Params.UICellContentsTextboxEditText;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod4Params.UICellContentsTextboxEditSendKeys, ModifierKeys.None);

            // Type 'B2 + B3' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod4Params.UICellContentsTextboxEditText1;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod4Params.UICellContentsTextboxEditSendKeys1, ModifierKeys.None);

            // Type '=B2 + B3' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod4Params.UICellContentsTextboxEditText2;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod4Params.UICellContentsTextboxEditSendKeys2, ModifierKeys.None);

            // Type '5' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod4Params.UICellContentsTextboxEditText3;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod4Params.UICellContentsTextboxEditSendKeys3, ModifierKeys.None);

            // Type '7' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod4Params.UICellContentsTextboxEditText4;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod4Params.UICellContentsTextboxEditSendKeys4, ModifierKeys.None);

            // Type '{Down}{Left}{Up}{Right}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod4Params.UICellContentsTextboxEditSendKeys5, ModifierKeys.None);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(73, 15));

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(23, 1));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(63, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(107, 2));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(23, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(13, 14));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(50, 7));

            // Click 'Date modified' text box
            Mouse.Click(uIDatemodifiedEdit, new Point(14, 19));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(28, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(35, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 19));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(6, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(12, 19));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(40, 9));

            // Click 'File' -> 'Load' menu item
            Mouse.Click(uILoadMenuItem, new Point(55, 4));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(30, 8));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(37, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(26, 23));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(29, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(30, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(60, 14));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(22, 13));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(19, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(37, 6));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextboxEdit = this.UISpreadsheetWindow.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod5Params.UISpreadsheetWindowExePath, this.RecordedMethod5Params.UISpreadsheetWindowAlternateExePath);

            // Type '{Down}{Left}{Up}{Right}{Right}{Down}{Down}{Down}{Left}{Left}{Up}{Up}{Right}{Down}{Down}{Down}{Right}{Right}{Left}{Left}{Left}{Down}{Right}{Right}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod5Params.UICellContentsTextboxEditSendKeys, ModifierKeys.None);

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(32, 14));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(76, 261));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(33, 7));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(84, 238));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(36, 13));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(90, 198));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(29, 4));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextboxEdit = this.UISpreadsheetWindow.UICellContentsTextboxWindow.UICellContentsTextboxEdit;
            WinButton uISubmitButton = this.UISpreadsheetWindow.UISubmitWindow.UISubmitButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveaSpreadsheetWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveaSpreadsheetWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod6Params.UISpreadsheetWindowExePath, this.RecordedMethod6Params.UISpreadsheetWindowAlternateExePath);

            // Type ' ' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod6Params.UICellContentsTextboxEditText;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(24, 13));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(52, 15));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(88, 9));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(40, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(19, 3));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(92, 124));

            // Type 'Test' in 'cellContentsTextbox' text box
            uICellContentsTextboxEdit.Text = this.RecordedMethod6Params.UICellContentsTextboxEditText1;

            // Type '{Enter}' in 'cellContentsTextbox' text box
            Keyboard.SendKeys(uICellContentsTextboxEdit, this.RecordedMethod6Params.UICellContentsTextboxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(44, 18));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(41, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 12));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISaveaSpreadsheetWindow UISaveaSpreadsheetWindow
        {
            get
            {
                if ((this.mUISaveaSpreadsheetWindow == null))
                {
                    this.mUISaveaSpreadsheetWindow = new UISaveaSpreadsheetWindow();
                }
                return this.mUISaveaSpreadsheetWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UIUnsavedWorkWindow UIUnsavedWorkWindow
        {
            get
            {
                if ((this.mUIUnsavedWorkWindow == null))
                {
                    this.mUIUnsavedWorkWindow = new UIUnsavedWorkWindow();
                }
                return this.mUIUnsavedWorkWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISaveaSpreadsheetWindow mUISaveaSpreadsheetWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UIUnsavedWorkWindow mUIUnsavedWorkWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\pengu\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-David" +
            "Mirabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-DavidM" +
            "irabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'A1' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText = "A1";
        
        /// <summary>
        /// Type 'C4' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText1 = "C4";
        
        /// <summary>
        /// Type '5' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText2 = "5";
        
        /// <summary>
        /// Type '4' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText3 = "4";
        
        /// <summary>
        /// Type '=B6 + C5' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText4 = "=B6 + C5";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\pengu\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-David" +
            "Mirabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-DavidM" +
            "irabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'A1' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText = "A1";
        
        /// <summary>
        /// Type '=A2 + A3' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText1 = "=A2 + A3";
        
        /// <summary>
        /// Type '7' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText2 = "7";
        
        /// <summary>
        /// Type '7' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText3 = "7";
        
        /// <summary>
        /// Type 'test' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText4 = "test";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsTextbox' text box equals ''
        /// </summary>
        public string UICellContentsTextboxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\pengu\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-David" +
            "Mirabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-DavidM" +
            "irabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'A1 + A2' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText = "A1 + A2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A2 * A3' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText1 = "=A2 * A3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText2 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '7' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText3 = "7";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type ' ' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText4 = " ";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Right}{Right}{Right}{Down}{Left}{Up}{Right}{Down}{Left}{Up}{Right}{Up}{Right}{Down}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Down}{Down}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Left}{Left}{Up}{Right}{Up}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys5 = "{Down}{Right}{Right}{Right}{Down}{Left}{Up}{Right}{Down}{Left}{Up}{Right}{Up}{Rig" +
            "ht}{Down}{Left}{Left}{Left}{Left}{Left}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Down}{Do" +
            "wn}{Right}{Right}{Down}{Down}{Down}{Down}{Down}{Left}{Left}{Up}{Right}{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\pengu\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-David" +
            "Mirabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-DavidM" +
            "irabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'A2 + A3' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText = "A2 + A3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'B2 + B3' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText1 = "B2 + B3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=B2 + B3' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText2 = "=B2 + B3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText3 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '7' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText4 = "7";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Left}{Up}{Right}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys5 = "{Down}{Left}{Up}{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\pengu\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-David" +
            "Mirabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-DavidM" +
            "irabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Down}{Left}{Up}{Right}{Right}{Down}{Down}{Down}{Left}{Left}{Up}{Up}{Right}{Down}{Down}{Down}{Right}{Right}{Left}{Left}{Left}{Down}{Right}{Right}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys = "{Down}{Left}{Up}{Right}{Right}{Down}{Down}{Down}{Left}{Left}{Up}{Up}{Right}{Down}" +
            "{Down}{Down}{Right}{Right}{Left}{Left}{Left}{Down}{Right}{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\pengu\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-David" +
            "Mirabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00534947\Homework Assignments\PS6_RyanDougherty-DavidMirabile\Demo\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00534947\\Homework Assignments\\PS6_RyanDougherty-DavidM" +
            "irabile\\Demo\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type ' ' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText = " ";
        
        /// <summary>
        /// Type 'Test' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditText1 = "Test";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsTextbox' text box
        /// </summary>
        public string UICellContentsTextboxEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("test2.sprd");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellContentsTextboxWindow UICellContentsTextboxWindow
        {
            get
            {
                if ((this.mUICellContentsTextboxWindow == null))
                {
                    this.mUICellContentsTextboxWindow = new UICellContentsTextboxWindow(this);
                }
                return this.mUICellContentsTextboxWindow;
            }
        }
        
        public UITestsprdTitleBar UITestsprdTitleBar
        {
            get
            {
                if ((this.mUITestsprdTitleBar == null))
                {
                    this.mUITestsprdTitleBar = new UITestsprdTitleBar(this);
                }
                return this.mUITestsprdTitleBar;
            }
        }
        
        public UITest2sprdTitleBar UITest2sprdTitleBar
        {
            get
            {
                if ((this.mUITest2sprdTitleBar == null))
                {
                    this.mUITest2sprdTitleBar = new UITest2sprdTitleBar(this);
                }
                return this.mUITest2sprdTitleBar;
            }
        }
        
        public UISubmitWindow UISubmitWindow
        {
            get
            {
                if ((this.mUISubmitWindow == null))
                {
                    this.mUISubmitWindow = new UISubmitWindow(this);
                }
                return this.mUISubmitWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UICellContentsTextboxWindow mUICellContentsTextboxWindow;
        
        private UITestsprdTitleBar mUITestsprdTitleBar;
        
        private UITest2sprdTitleBar mUITest2sprdTitleBar;
        
        private UISubmitWindow mUISubmitWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("test2.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("test2.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UILoadMenuItem
        {
            get
            {
                if ((this.mUILoadMenuItem == null))
                {
                    this.mUILoadMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUILoadMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Load";
                    this.mUILoadMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUILoadMenuItem.WindowTitles.Add("test2.sprd");
                    #endregion
                }
                return this.mUILoadMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUILoadMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanelClient
        {
            get
            {
                if ((this.mUISpreadsheetPanelClient == null))
                {
                    this.mUISpreadsheetPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanelClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentsTextboxWindow : WinWindow
    {
        
        public UICellContentsTextboxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsTextbox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsTextboxEdit
        {
            get
            {
                if ((this.mUICellContentsTextboxEdit == null))
                {
                    this.mUICellContentsTextboxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsTextboxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentsTextboxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsTextboxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestsprdTitleBar : WinTitleBar
    {
        
        public UITestsprdTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITest2sprdTitleBar : WinTitleBar
    {
        
        public UITest2sprdTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("test2.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("test2.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISubmitWindow : WinWindow
    {
        
        public UISubmitWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "submitButton";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISubmitButton.SearchProperties[WinButton.PropertyNames.Name] = "Submit";
                    this.mUISubmitButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISubmitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveaSpreadsheetWindow : WinWindow
    {
        
        public UISaveaSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save a Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITestsprdListItem UITestsprdListItem
        {
            get
            {
                if ((this.mUITestsprdListItem == null))
                {
                    this.mUITestsprdListItem = new UITestsprdListItem(this);
                }
                return this.mUITestsprdListItem;
            }
        }
        
        public UITest2sprdListItem UITest2sprdListItem
        {
            get
            {
                if ((this.mUITest2sprdListItem == null))
                {
                    this.mUITest2sprdListItem = new UITest2sprdListItem(this);
                }
                return this.mUITest2sprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestsprdListItem mUITestsprdListItem;
        
        private UITest2sprdListItem mUITest2sprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestsprdListItem : WinListItem
    {
        
        public UITestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test.sprd";
            this.WindowTitles.Add("Save a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save a Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        
        public WinEdit UIDatemodifiedEdit
        {
            get
            {
                if ((this.mUIDatemodifiedEdit == null))
                {
                    this.mUIDatemodifiedEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDatemodifiedEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Date modified";
                    this.mUIDatemodifiedEdit.WindowTitles.Add("Save a Spreadsheet");
                    #endregion
                }
                return this.mUIDatemodifiedEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        
        private WinEdit mUIDatemodifiedEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITest2sprdListItem : WinListItem
    {
        
        public UITest2sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2.sprd";
            this.WindowTitles.Add("Save a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save a Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save a Spreadsheet");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save a Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Save a Spreadsheet");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UICellContentsTextboxWindow1 UICellContentsTextboxWindow
        {
            get
            {
                if ((this.mUICellContentsTextboxWindow == null))
                {
                    this.mUICellContentsTextboxWindow = new UICellContentsTextboxWindow1(this);
                }
                return this.mUICellContentsTextboxWindow;
            }
        }
        
        public UITestsprdTitleBar1 UITestsprdTitleBar
        {
            get
            {
                if ((this.mUITestsprdTitleBar == null))
                {
                    this.mUITestsprdTitleBar = new UITestsprdTitleBar1(this);
                }
                return this.mUITestsprdTitleBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UICellContentsTextboxWindow1 mUICellContentsTextboxWindow;
        
        private UITestsprdTitleBar1 mUITestsprdTitleBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentsTextboxWindow1 : WinWindow
    {
        
        public UICellContentsTextboxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsTextbox";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsTextboxEdit
        {
            get
            {
                if ((this.mUICellContentsTextboxEdit == null))
                {
                    this.mUICellContentsTextboxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsTextboxEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICellContentsTextboxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsTextboxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestsprdTitleBar1 : WinTitleBar
    {
        
        public UITestsprdTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUnsavedWorkWindow : WinWindow
    {
        
        public UIUnsavedWorkWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Unsaved Work.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Unsaved Work.");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Unsaved Work.");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Unsaved Work.");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Unsaved Work.");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Unsaved Work.");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Unsaved Work.");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Unsaved Work.");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
